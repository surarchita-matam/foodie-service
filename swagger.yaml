openapi: 3.0.0
info:
  title: Foodie Service API
  description: A Go-based microservice for food ordering and management
  version: 1.0.0
  contact:
    name: Foodie Service Team

servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    Error:
      type: object
      properties:
        errorType:
          type: string
          description: Type of error
        errorMessage:
          type: string
          description: Detailed error message
        status:
          type: integer
          description: HTTP status code

    SignInRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          description: User's password

    SignInResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authentication

    SignupRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          description: User's password (must be strong)

    SignupResponse:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user

    Product:
      type: object
      properties:
        id:
          type: string
          description: Product ID
        name:
          type: string
          description: Product name
        price:
          type: number
          format: float
          description: Product price
        description:
          type: string
          description: Product description

    BulkProductsRequest:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'

    OrderItem:
      type: object
      properties:
        productId:
          type: string
          description: ID of the product
        quantity:
          type: integer
          description: Quantity of the product

    BulkOrdersRequest:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        couponCode:
          type: string
          description: Optional coupon code for discount

    PurchaseDetails:
      type: object
      properties:
        orderId:
          type: string
          description: Unique order identifier
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        totalPrice:
          type: number
          format: float
          description: Total price before discount
        discount:
          type: number
          format: float
          description: Discount amount
        finalPrice:
          type: number
          format: float
          description: Final price after discount
        couponCode:
          type: string
          description: Applied coupon code

    Coupon:
      type: object
      properties:
        code:
          type: string
          description: Coupon code
        discount:
          type: number
          format: float
          description: Discount percentage

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the service
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy

  /login:
    post:
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /signup:
    post:
      summary: User registration
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
        '400':
          description: Invalid request body or weak password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products:
    get:
      summary: Get all products
      description: Retrieve a list of all available products
      responses:
        '200':
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Products fetched successfully
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{id}:
    get:
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product fetched successfully
                  product:
                    $ref: '#/components/schemas/Product'
        '400':
          description: Invalid product ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /load-products:
    post:
      summary: Bulk load products
      description: Insert multiple products into the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkProductsRequest'
      responses:
        '200':
          description: Products inserted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Products inserted successfully
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /fetch-coupons:
    get:
      summary: Get available coupons
      description: Retrieve a list of all available coupons
      responses:
        '200':
          description: Coupons retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Coupons fetched successfully
                  coupons:
                    type: array
                    items:
                      $ref: '#/components/schemas/Coupon'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    post:
      summary: Place a new order
      description: Create a new order with the specified items
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkOrdersRequest'
      responses:
        '200':
          description: Order placed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order placed successfully
                  order:
                    $ref: '#/components/schemas/PurchaseDetails'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get user orders
      description: Retrieve orders for the authenticated user
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 5
          description: Number of orders to retrieve
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Number of orders to skip
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order fetched successfully
                  order:
                    type: array
                    items:
                      $ref: '#/components/schemas/PurchaseDetails'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No orders found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 